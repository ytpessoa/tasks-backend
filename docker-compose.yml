version: "3"
services:   
    ########################################################
    # banco de teste Postgres dockerizado para testes      #
    ########################################################
    
    # pg-tasks:
    #     container_name: pg-tasks
    #     image: postgres:9.6 
    #     ports: 
    #         - 5433:5432 #out:int
    #     environment: 
    #         -  POSTGRES_DB=tasks
    #         -  POSTGRES_PASSWORD=password
    
    ########################################################
    # banco de producao Postgres dockerizado               #
    ########################################################
    db-host:
        container_name: db-postgres-prod
        image: postgres:9.6 
        networks: 
            - prod_net_back
        environment: 
            -  POSTGRES_DB=tasks
            -  POSTGRES_PASSWORD=password
        volumes:
            - prod_postgresql:/var/lib/postgresql
            - prod_postgresql_data:/var/lib/postgresql/data

    ########################################################
    # BackEnd                                              #
    ######################################################## 
    backend-host:
        container_name: backend-prod
        image: back_prod:build_${BUILD_NUMBER}
        #relacionado do Dockerfile:
        build: 
            context: . # mesmo nível do Dockerfile
            args: 
                - WAR_FILE=target/tasks-backend.war
                - CONTEXT=tasks-backend
        networks: 
            - prod_net_back
            - prod_net_front
        
        # ports: 
        #     - 9998:8080
        
        environment: 
            #CONEXÃO COM O BANCO:
            - DATABASE_HOST=db-host
            - DATABASE_PORT= 5432 #postgres
            - DATABASE_USER=postgres
            - DATABASE_PASSWD=passwd
            #- DATABASE_UPDATE=none
        depends_on: 
            - db-host
    
    ########################################################
    # FrontEnd                                             #
    ######################################################## 
    frontend-host:
        container_name: frontend-prod
        image: front_prod:build_${BUILD_NUMBER}
        #relacionado do Dockerfile:
        build: 
            context: . # mesmo nível do Dockerfile
            args: 
                - WAR_FILE=frontend/target/tasks.war
                - CONTEXT=tasks
        networks: 
            - prod_net_front
        
        ports: 
            - 9999:8080
        
        environment: 
            #CONEXÃO COM O BACKEND:
            - BACKEND_HOST=backend-host
            - BACKEND_PORT=8080 #padrao do Tomcat que tá no backend-host 
            - APP_VERSION=build_${BUILD_NUMBER}
        
        # depends_on: 
        #     - backend-host
    
                
networks:    
    prod_net_front:
    prod_net_back: 

volumes:
    postgresql:
    postgresql_data:



### Comandos #####

# > docker stop teste
# > docker-compose up

# Docker desktop:
#     wsl -d docker-desktop
#     sysctl -w vm.max_map_count=500144
    
# Clean up:
# docker ps -a
# docker rm faf 8b0 
# docker system prune

# docker images 
#             docker images -f "reference=*build*" -q
#[powerShell] docker rmi $(docker images -f "reference=*build*" -q)
#front: localhost:9999/tasks/